{"version":3,"sources":["logo.svg","components/AutoWrite.js","data.js","components/Console.js","App.js","reportWebVitals.js","index.js"],"names":["AutoWrite","props","React","useState","text","settext","useEffect","app","document","getElementById","Typewriter","delay","typeString","start","id","responses","property","resp","Console","consoleState","setConsoleState","style","marginTop","padding","className","map","item","i","length","dangerouslySetInnerHTML","__html","backgroundColor","border","width","placeholder","type","onKeyDown","e","keyCode","response","newState","lowCaseValue","value","toLowerCase","console","log","Data","forEach","items","undefined","push","window","scrollTo","innerHeight","witeOnConsole","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2LAAe,I,mCC6BAA,EA1BG,SAAAC,GAAU,IAAD,EACCC,IAAMC,SAASF,EAAMG,MADtB,mBAChBA,EADgB,KACVC,EADU,KAgBvB,OAbEH,IAAMI,WAAU,WACd,IAAIC,EAAMC,SAASC,eAAe,UACd,IAAIC,IAAWH,EAAK,CACpCI,MAAM,IAGLC,WAAWR,GACXS,QACHR,EAAQD,KAGT,CAACH,EAAMG,OAGR,8BACI,mBAAGU,GAAG,cCXHC,EAVG,CACd,CACIC,SAAS,OACTC,KAAK,iBAET,CACID,SAAS,eACTC,KAAK,sICiEEC,MAnEf,WAAoB,IAAD,EACyBhB,IAAMC,SAC1C,CAAC,kJAFU,mBACRgB,EADQ,KACMC,EADN,KA2Cf,OACI,sBAAKC,MAvCK,CACVC,UAAW,QACXC,QAAS,QAqCUC,UAAU,YAA7B,UAEQL,EAAaM,KAAI,SAACC,EAAMC,GACpB,OAAIA,IAAMR,EAAaS,OAAS,EACrB,cAAC,EAAD,CAAWxB,KAAMsB,IAGjB,mBAAGG,wBAAyB,CAAEC,OAAQJ,QAMzD,uBAAOF,UAAU,gBAAgBH,MAhDtB,CACfU,gBAAiB,cACjBC,OAAQ,MACRC,MAAO,QA6CiDC,YAAY,IAAIC,KAAK,OAAOC,UAC3E,SAACC,GACoB,KAAdA,EAAEC,SA7CA,SAAClC,GACnB,IAEImC,EAFEC,EAAQ,YAAOrB,GACfsB,EAAerC,EAAKsC,MAAMC,cAEhCC,QAAQC,IAAIC,GAES,WAAjBL,GACAF,EAAW,mCACXO,EAAKC,SAAQ,SAAAC,GAAK,OAAIT,GAAQ,UAAOS,EAAMhC,SAAb,cAE9B8B,EAAKC,SAAQ,YAAyB,IAAtB/B,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAClBD,IAAayB,IACbF,EAAWtB,WAMLgC,IAAbV,IACDA,EAAQ,qBAAiBE,EAAjB,wIAGZD,EAASU,KAAK9C,EAAKsC,OACnBF,EAASU,KAAKX,GACdnC,EAAKsC,MAAQ,GACbS,OAAOC,SAAS,EAAGD,OAAOE,aAC1BjC,EAAgBoB,GAoBAc,CAAcjB,EAAEkB,eCnDzBC,MAVf,WAGE,OACE,qBAAKhC,UAAU,MAAf,SACC,cAAC,EAAD,OCGUiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5D,SAASC,eAAe,SAM1BgD,M","file":"static/js/main.f0bb469d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport Typewriter from 'typewriter-effect/dist/core';\r\n\r\nconst AutoWrite = props => {\r\n    const [text, settext] = React.useState(props.text)\r\n    \r\n      React.useEffect(() => {\r\n        var app = document.getElementById(\"last-p\");\r\n        const typewriter =  new Typewriter(app, {\r\n            delay:1\r\n          });\r\n          typewriter\r\n            .typeString(text)\r\n            .start();\r\n          settext(text)\r\n\r\n          \r\n      }, [props.text])\r\n    \r\n    return (\r\n        <div>\r\n            <p id=\"last-p\">\r\n                \r\n            </p>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default AutoWrite\r\n","const responses = [\r\n    {\r\n        property:\"name\",\r\n        resp:\"Lautaro Bruno\"\r\n    },\r\n    {\r\n        property:\"social media\",\r\n        resp:\"Instagram <a href=https://www.instagram.com/lautarobrunok/><img href='https://www.flaticon.es/icono-gratis/instagram_174855'></a>\"\r\n    }\r\n]\r\nexport default responses","import React from 'react'\r\nimport AutoWrite from './AutoWrite'\r\nimport Data from '../data'\r\nimport responses from '../data'\r\n\r\nfunction Console() {\r\n    const [consoleState, setConsoleState] = React.useState(\r\n        ['Welcome to mi console Resume, check the comands to write on the console on the top of the page or write \"comands\" on the console to know more']\r\n\r\n    )\r\n    const style = {\r\n        marginTop: \"120px\",\r\n        padding: \"20px\"\r\n    }\r\n    const inputStyle = {\r\n        backgroundColor: \"transparent\",\r\n        border: \"0px\",\r\n        width: \"100%\"\r\n    }\r\n    const witeOnConsole = (text) => {\r\n        const newState = [...consoleState]\r\n        const lowCaseValue = text.value.toLowerCase()\r\n        let response\r\n        console.log(Data)\r\n\r\n        if (lowCaseValue === \"comand\") {\r\n            response = \"The avaliable comands are: <br/>\"\r\n            Data.forEach(items => response += `${items.property} <br/>`)\r\n        } else {\r\n            Data.forEach(({ property, resp }) => {\r\n                if (property === lowCaseValue) {\r\n                    response = resp\r\n                    \r\n                }\r\n                \r\n            })\r\n        }\r\n         if (response === undefined ) {\r\n            response = `The comand ${lowCaseValue} is not a know comand.<br/> You can check the list of comands on the top of the screen or write \"comand\" to see the list on screen.`\r\n         }\r\n            \r\n        newState.push(text.value)\r\n        newState.push(response)\r\n        text.value = \"\"\r\n        window.scrollTo(0, window.innerHeight)\r\n        setConsoleState(newState)\r\n    }\r\n\r\n    return (\r\n        <div style={style} className=\"container\">\r\n            {\r\n                consoleState.map((item, i) => {\r\n                    if (i === consoleState.length - 1) {\r\n                        return <AutoWrite text={item} />\r\n                    }\r\n                    else {\r\n                        return <p dangerouslySetInnerHTML={{ __html: item }}></p>\r\n                    }\r\n                })\r\n            }\r\n\r\n\r\n            <input className=\"input-console\" style={inputStyle} placeholder=\"_\" type=\"text\" onKeyDown=\r\n                {(e) => {\r\n                    if (e.keyCode === 13) {\r\n                        witeOnConsole(e.target)\r\n                    }\r\n                }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Console\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Console from './components/Console';\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n     <Console />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}